#/config.py
import os


class Config:
    SECRET_KEY = os.getenv("KEY")  # Load the secret key from the .env file
    SQLALCHEMY_DATABASE_URI = (
        "sqlite:///expense_manager.db"  # Using SQLite for simplicity
    )
    SQLALCHEMY_TRACK_MODIFICATIONS = False


#/app/__init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from config import Config
from dotenv import load_dotenv
from app.models.user import User
from app.models.account import Account
from app.models.category import Category
from app.models.transaction import Transaction


# from app.routes import main_blueprint

# Load environment variables
load_dotenv()

db = SQLAlchemy()
migrate = Migrate()


def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    db.init_app(app)
    migrate.init_app(app, db)

    # app.register_blueprint(main_blueprint)

    return app


#/app/models/account.py
from app import db


class Account(db.Model):
    __tablename__ = "account"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    balance = db.Column(db.Float, default=0.0)
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)

    transactions = db.relationship("Transaction", backref="account", lazy=True)


#/app/models/category.py
from app import db


class Category(db.Model):
    __tablename__ = "category"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)

    transactions = db.relationship("Transaction", backref="category", lazy=True)


#/app/models/transaction.py
from app import db
from datetime import datetime


class Transaction(db.Model):
    __tablename__ = "transaction"
    id = db.Column(db.Integer, primary_key=True)
    amount = db.Column(db.Float, nullable=False)
    date = db.Column(db.DateTime, default=datetime.utcnow)
    description = db.Column(db.String(200))
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)
    account_id = db.Column(db.Integer, db.ForeignKey("account.id"), nullable=False)
    category_id = db.Column(db.Integer, db.ForeignKey("category.id"), nullable=False)


#/app/models/user.py
from app import db
from flask_login import UserMixin


class User(db.Model, UserMixin):
    __tablename__ = "user"
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)

    accounts = db.relationship("Account", backref="owner", lazy=True)
    transactions = db.relationship("Transaction", backref="user", lazy=True)



#/app/utils/db_utils.py
from app import db


def add_record(record):
    """
    Add a record to the database and commit the session.
    """
    db.session.add(record)
    update_record()


def delete_record(record):
    """
    Delete a record from the database and commit the session.
    """
    db.session.delete(record)
    update_record()


def find_record_by_id(model, record_id):
    """
    Find a single record by its ID.

    Args:
        model: The model class (e.g., User, Account).
        record_id: The ID of the record to find.

    Returns:
        The found record or None if not found.
    """
    return model.query.get(record_id)


def find_records_by_filter(model, **filters):
    """
    Find records that match given filter criteria.

    Args:
        model: The model class (e.g., User, Account).
        filters: Arbitrary keyword arguments to filter by (e.g., username='john').

    Returns:
        A list of matching records.
    """
    return model.query.filter_by(**filters).all()


def update_record():
    """
    Commit changes to an existing record.
    """
    try:
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        raise e
